// @prepros-prepend "jquery.appear.js"

// Generated by CoffeeScript 1.4.0

/*
Easy pie chart is a jquery plugin to display simple animated pie charts for only one value

Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.

Built on top of the jQuery library (http://jquery.com)

@source: http://github.com/rendro/easy-pie-chart/
@autor: Robert Fleischmann
@version: 1.0.1

Inspired by: http://dribbble.com/shots/631074-Simple-Pie-Charts-II?list=popular&offset=210
Thanks to Philip Thrasher for the jquery plugin boilerplate for coffee script
*/

/*!
 * Chart.js
 * http://chartjs.org/
 *
 * Copyright 2013 Nick Downie
 * Released under the MIT license
 * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md
 */

//Define the global Chart Variable as a class.
(function ($) {
    // USE STRICT
    "use strict";

    $.fn.countTo = function (options) {
        options = $.extend({}, $.fn.countTo.defaults, options || {});
        var loops = Math.ceil(options.speed / options.refreshInterval),
            increment = (options.to - options.from) / loops;
        return $(this).each(function () {
            var _this = this,
                loopCount = 0,
                value = options.from,
                interval = setInterval(updateTimer, options.refreshInterval);

            function updateTimer() {
                value += increment;
                loopCount++;
                $(_this).html(value.toFixed(options.decimals));
                if (typeof (options.onUpdate) === 'function') {
                    options.onUpdate.call(_this, value)
                }
                if (loopCount >= loops) {
                    clearInterval(interval);
                    value = options.to;
                    if (typeof (options.onComplete) === 'function') {
                        options.onComplete.call(_this, value)
                    }
                }
            }
        })
    };
    $.fn.countTo.defaults = {
        from: 0,
        to: 100,
        speed: 1000,
        refreshInterval: 100,
        decimals: 0,
        onUpdate: null,
        onComplete: null,
    }

})(jQuery);



/**************************************************************/
function initProgressBars() {
    "use strict";
    if ($j('.progress_bars .progress_bar').length) {
        $j('.progress_bars .progress_bar').each(function () {
            $j(this).appear(function () {
                var $animation = true;
                if ($(window).width()<=480) {
                    $animation = false;
                }

                    var percentage = $j(this).find('.progress_content').data('percentage'),
                    percent_width = $j(this).find('.progress_number').width(),color='#1abc9c',bgcolor='transparent';

                    if($j(this).find('.progress_content').data('active')){
                        color=$j(this).find('.progress_content').data('active');
                    }

                    if($j(this).find('.progress_content').data('nonactive')){
                        bgcolor=$j(this).find('.progress_content').data('nonactive');
                    }


                    $j(this).find('.progress_content_outer').css({'background-color': bgcolor});


                    if ($animation) {
                        $j(this).find('.progress_content').css({'width':'0%','background-color': color});

                        var $counter=$j(this).find('.progress_number span'),$max = parseFloat($counter.text());

                        $j(this).find('.progress_number').css('opacity', '1');

                        $counter.text(0);

                        $counter.countTo({
                            from: 0,
                            to: $max,
                            speed: 1500,
                            refreshInterval: 50
                        });

                        $j(this).find('.progress_content').animate({
                            'width': percentage + '%'
                        }, 2000,function(){

                        });
                    } else {
                        $j(this).find('.progress_content').css('width', percentage + '%');
                        $j(this).find('.progress_number').css('opacity', '1');
                    }

            }, {
                accX: 0,
                accY: -100
            })
        })
    }
}

var $j = jQuery.noConflict(),
    scroll = 0;
$j(document).ready(function () {
    "use strict";
      initProgressBars();
});


function initToCounterHorizontalProgressBar() {
    "use strict";
    if ($j('.progress_bars .progress_number span').length) {
        $j('.progress_bars .progress_number span').each(function () {
            $j(this).parent().css('opacity', '1');
            var $max = parseFloat($j(this).text());
            $j(this).countTo({
                from: 0,
                to: $max,
                speed: 1500,
                refreshInterval: 50
            })
        })
    }
}



var $ = jQuery.noConflict();




